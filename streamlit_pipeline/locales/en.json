{
  "app": {
    "title": "🧠 GraphJudge - Intelligent Knowledge Graph Construction System",
    "description": "**GraphJudge** is an intelligent knowledge graph construction system based on large language models. Through a three-stage processing pipeline, it extracts entities from Chinese text, generates knowledge triples, and uses AI for quality assessment.",
    "getting_started": "💡 **Getting Started**: Upload a Chinese text file (.txt) or paste text directly to begin analysis.",
    "version": "**Version**: 2.0",
    "models": "**Models**: GPT-5-mini + Perplexity",
    "best_for": "**Best for**: Chinese classical literature texts",
    "developed_by": "**Developed by**: GraphJudge Research Team"
  },
  "sidebar": {
    "configuration": "⚙️ Configuration Options",
    "api_settings": "🔌 API Settings",
    "api_timeout": "API Timeout (seconds)",
    "max_retries": "Max Retries",
    "processing_options": "🔄 Processing Options",
    "enable_explanations": "Enable Judgment Explanations",
    "batch_size": "Batch Size",
    "display_options": "🎨 Display Options",
    "language_selection": "🌐 Language / 語言",
    "show_technical_details": "Show Technical Details",
    "auto_scroll": "Auto-scroll to Results",
    "debug_mode": "Debug Mode",
    "debug_options": "🐛 Debug Options",
    "log_level": "Log Level",
    "show_timing": "Show Detailed Timing",
    "api_status": "🔌 API Status Check",
    "test_connection": "Test API Connection",
    "testing_apis": "Testing API connections...",
    "about": "ℹ️ About",
    "clear_results": "🗑️ Clear Results",
    "full_cleanup": "🧹 Full Cleanup",
    "session_stats": "📊 Session Statistics",
    "run_count": "Run Count: {count}",
    "successful_runs": "Successful Runs: {count}",
    "success_rate": "Success Rate: {rate}"
  },
  "input": {
    "title": "📝 Input Text",
    "description": "Please upload a Chinese text file (.txt) or enter text directly:",
    "tab_file": "📁 File Upload",
    "tab_text": "✍️ Direct Input",
    "choose_file": "Choose a text file",
    "upload_help": "Upload a .txt file containing Chinese text for analysis",
    "text_placeholder": "Please enter your Chinese text here. Example: 红楼梦是清代作家曹雪芹创作的章回体长篇小说...",
    "text_help": "Supports Chinese classical literature texts, model is optimized for Chinese",
    "file_error": "❌ Failed to read the file. Please ensure it's a valid Chinese text file with proper encoding.",
    "text_stats": "📊 Text Statistics",
    "character_count": "Characters",
    "word_count": "Words",
    "paragraph_count": "Paragraphs",
    "chinese_chars": "Chinese Chars",
    "encoding_used": "Encoding Used",
    "reading_time": "Est. Reading Time",
    "reading_time_unit": "min"
  },
  "processing": {
    "title": "🔄 Processing...",
    "progress_title": "🔄 Processing Progress",
    "complete_title": "✅ Processing Complete",
    "entity_phase": "🔍 Entity Extraction Phase",
    "triple_phase": "🔗 Triple Generation Phase",
    "judgment_phase": "⚖️ Graph Judgment Phase",
    "error_occurred": "❌ Processing Error Occurred"
  },
  "results": {
    "detailed_analysis": "📋 Detailed Results Analysis",
    "historical_comparison": "📈 Historical Comparison Analysis",
    "pipeline_summary": "📈 Pipeline Execution Summary",
    "final_kg": "🧠 Final Knowledge Graph",
    "export_options": "📤 Export Options",
    "kg_details": "📋 Knowledge Triple Details",
    "interactive_graph": "🕸️ Interactive Knowledge Graph",
    "rejected_analysis": "Rejected Triples Analysis",
    "analysis_report": "📊 Analysis Report"
  },
  "entity": {
    "title": "🔍 Entity Extraction Results",
    "processing_phases": "🔬 Detailed Processing Phases",
    "phase1_title": "Phase 1: Entity Extraction with GPT-5-mini",
    "phase1_description": "📝 **Advanced Language Understanding**: GPT-5-mini analyzes classical Chinese text using contextual understanding and entity recognition patterns optimized for Chinese literature.",
    "extracted_entities": "📊 Extracted Entities with Smart Categorization",
    "phase2_title": "Phase 2: Text Denoising and Restructuring",
    "phase2_description": "🧹 **GPT-5-mini Text Optimization**: Intelligently restructures and cleans the text based on extracted entities, removing redundant descriptions while preserving essential factual content for accurate knowledge graph generation.",
    "denoised_preview": "📝 Denoised Text Preview",
    "error_analysis": "🔍 Error Analysis & Troubleshooting",
    "error_suggestions": [
      "**API Connectivity**: Check internet connection and API key configuration",
      "**Input Format**: Ensure input text contains valid Chinese characters",
      "**Rate Limiting**: API quota may be exceeded, try again later",
      "**Text Length**: Input may be too long, try breaking into smaller segments",
      "**Model Availability**: GPT-5-mini service may be temporarily unavailable"
    ],
    "technical_details": "Technical Details:"
  },
  "triple": {
    "title": "🔗 Knowledge Triple Generation Results",
    "detailed_phases": "🔬 Detailed Triple Generation Phases",
    "phase1_title": "Phase 1: Semantic Analysis & Relation Extraction",
    "phase1_description": "🧠 **GPT-5-mini Semantic Processing**: Analyzes denoised text to identify meaningful relationships between entities using advanced natural language understanding and Chinese literature context.",
    "phase2_title": "Phase 2: Triple Validation & Formatting",
    "phase2_description": "🔧 **Structure Validation**: Validates generated triples against schema requirements and applies quality filters to ensure proper subject-predicate-object relationships.",
    "generated_triples": "📊 Generated Knowledge Triples",
    "error_analysis": "🔍 Triple Generation Error Analysis",
    "processing_stats": "Processing Statistics",
    "chunks_processed": "Chunks Processed",
    "avg_processing_time": "Avg Processing Time",
    "unique_relations": "Unique Relations"
  },
  "judgment": {
    "title": "⚖️ Graph Judgment Results",
    "filter_display": "Filter Display",
    "sort_by": "Sort By",
    "all": "All",
    "approved_only": "Approved Only",
    "rejected_only": "Rejected Only",
    "status": "Status",
    "confidence": "Confidence",
    "subject": "Subject",
    "relation": "Relation",
    "object": "Object",
    "approved": "Approved",
    "rejected": "Rejected",
    "results_details": "📋 Judgment Results Details ({count} items)",
    "explanations": "💭 Judgment Explanations",
    "analysis": "📊 Judgment Results Analysis",
    "reference_sources": "**Reference Sources:** {sources}",
    "reasoning": "**AI Judgment Explanation:**",
    "evidence_sources": {
      "historical_records": "Historical Records",
      "literary_works": "Literary Works",
      "common_knowledge": "Common Knowledge",
      "domain_expertise": "Domain Expertise"
    }
  },
  "metrics": {
    "total_runs": "Total Runs",
    "avg_processing_time": "Average Processing Time",
    "total_triples": "Total Generated Triples",
    "approval_rate": "Recent Approval Rate",
    "time_seconds": "{time}s",
    "percentage": "{rate}%"
  },
  "buttons": {
    "start_processing": "Start Processing",
    "process_text": "Process Text",
    "export_json": "📄 Export JSON",
    "export_csv": "📊 Export CSV",
    "export_rdf": "🔗 Export RDF",
    "download": "Download",
    "retry": "Retry",
    "back_to_input": "Back to Input",
    "view_details": "View Details",
    "historical_comparison": "Historical Comparison"
  },
  "status": {
    "success": "✅ Success",
    "error": "❌ Error",
    "processing": "🔄 Processing...",
    "complete": "✅ Complete",
    "failed": "❌ Failed",
    "approved": "✅ Approved",
    "rejected": "❌ Rejected"
  },
  "errors": {
    "api_error": "API connection error occurred",
    "processing_error": "Processing error occurred",
    "file_error": "File reading error",
    "validation_error": "Input validation error",
    "timeout_error": "Request timeout error",
    "generic_error": "An unexpected error occurred"
  }
}